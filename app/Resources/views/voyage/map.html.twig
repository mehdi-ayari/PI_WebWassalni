{% extends 'base.html.twig' %}

{% block content %}


<div id="map"></div>
<script src="https://unpkg.com/es6-promise@4.2.4/dist/es6-promise.auto.min.js"></script>
<script src="https://unpkg.com/@mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>
<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiamF3aGFyY2giLCJhIjoiY2s2dGVvOGlpMDB3NDNtcHVzcmxhdmR2YyJ9.VHALBLsdspgxm5eIuC270Q';
    var mapboxClient = mapboxSdk({ accessToken: mapboxgl.accessToken });
    mapboxClient.geocoding
        .forwardGeocode({
            query: 'Tunisia, {{ voyage.reservationRes.destination }}',
            autocomplete: false,
            limit: 1
        })
        .send()
        .then(function(response) {
            if (
                response &&
                response.body &&
                response.body.features &&
                response.body.features.length
            ) {
                var feature = response.body.features[0];

                var map = new mapboxgl.Map({
                    container: 'map',
                    style: 'mapbox://styles/mapbox/streets-v11',
                    center: feature.center,
                    zoom: 10
                });
                new mapboxgl.Marker().setLngLat(feature.center).addTo(map);
                map.addControl(
                    new mapboxgl.GeolocateControl({
                        positionOptions: {
                            enableHighAccuracy: true
                        },
                        trackUserLocation: true
                    })
                );
                map.addControl(new mapboxgl.NavigationControl());

                var canvas = map.getCanvasContainer();

                function getRoute(end) {
                    // make a directions request using cycling profile
                    // an arbitrary start will always be the same
                    // only the end or destination will change


                    var start = feature.center;
                    var url = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;



                    var req = new XMLHttpRequest();





                    // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest

                    req.open('GET', url, true);
                    req.onload = function() {
                        var json = JSON.parse(req.response);
                        var data = json.routes[0];
                        var route = data.geometry.coordinates;
                        var distance = data.distance;
                        document.getElementById('output').innerHTML = distance;
                        if (history.pushState) {
                            window.history.pushState(distance, "Page Title", "{{ path('voyage_map', { 'idVoyage': voyage.idVoyage }) }}?distance=" + distance+"&dest=" + start);
                        } else {
                            window.location.href = "{{ path('voyage_map', { 'idVoyage': voyage.idVoyage }) }}?distance=" + distance +"&dest=" + start;
                        }

                        var geojson = {
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'LineString',
                                coordinates: route
                            }
                        };
                        // if the route already exists on the map, reset it using setData
                        if (map.getSource('route')) {
                            map.getSource('route').setData(geojson);
                        } else { // otherwise, make a new request
                            map.addLayer({
                                id: 'route',
                                type: 'line',
                                source: {
                                    type: 'geojson',
                                    data: {
                                        type: 'Feature',
                                        properties: {},
                                        geometry: {
                                            type: 'LineString',
                                            coordinates: geojson
                                        }
                                    }
                                },
                                layout: {
                                    'line-join': 'round',
                                    'line-cap': 'round'
                                },
                                paint: {
                                    'line-color': '#3887be',
                                    'line-width': 5,
                                    'line-opacity': 0.75
                                }
                            });
                        }
                        // add turn instructions here at the end
                    };
                    req.send();
                };

                map.on('load', function() {
                    // make an initial directions request that
                    // starts and ends at the same location
                    getRoute(start);

                    // Add starting point to the map
                    map.addLayer({
                        id: 'point',
                        type: 'circle',
                        source: {
                            type: 'geojson',
                            data: {
                                type: 'FeatureCollection',
                                features: [{
                                    type: 'Feature',
                                    properties: {},
                                    geometry: {
                                        type: 'Point',
                                        coordinates: start
                                    }
                                }
                                ]
                            }
                        },
                        paint: {
                            'circle-radius': 10,
                            'circle-color': '#3887be'
                        }
                    });
                    // this is where the code from the next step will go
                });

                map.on('click', function(e) {
                    var coordsObj = e.lngLat;
                    canvas.style.cursor = '';
                    var coords = Object.keys(coordsObj).map(function(key) {
                        return coordsObj[key];
                    });
                    var end = {
                        type: 'FeatureCollection',
                        features: [{
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'Point',
                                coordinates: coords
                            }
                        }
                        ]
                    };
                    if (map.getLayer('end')) {
                        map.getSource('end').setData(end);
                    } else {
                        map.addLayer({
                            id: 'end',
                            type: 'circle',
                            source: {
                                type: 'geojson',
                                data: {
                                    type: 'FeatureCollection',
                                    features: [{
                                        type: 'Feature',
                                        properties: {},
                                        geometry: {
                                            type: 'Point',
                                            coordinates: coords
                                        }
                                    }]
                                }
                            },
                            paint: {
                                'circle-radius': 10,
                                'circle-color': '#f30'
                            }
                        });
                    }
                    getRoute([coords]);
                });

            }
        });


</script>
<section class="home-about-area section-gap">

    <div class="row align-items-center">

        <div class="col-lg-6 about-right">

            <h4 id="output"> </h4>metres
            <h4 id="datetime" > date : {{ voyage.dateVoyage|date('d/m/Y H:i:s') }}</h4>
            <h4> reservation : {{ voyage.reservationRes.destination }}</h4>
        </div>
    </div>
</section>


{% endblock %}